/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { RobotTxt, RobotTxtInterface } from "../../src/RobotTxt";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "robotAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AlreadyWhitelisted",
    type: "error",
  },
  {
    inputs: [],
    name: "LicenseNotRegistered",
    type: "error",
  },
  {
    inputs: [],
    name: "NotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "NotWhitelisted",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroValue",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "contractAddress",
        type: "address",
      },
    ],
    name: "ContractDelisted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "contractAddress",
        type: "address",
      },
    ],
    name: "ContractWhitelisted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_by",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_for",
        type: "address",
      },
    ],
    name: "LicenseRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_by",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_for",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "_licenseUri",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "_info",
        type: "string",
      },
    ],
    name: "LicenseSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "contractAddressToOwnerWhitelist",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "contractAddress",
        type: "address",
      },
    ],
    name: "delistOwnerContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "getOwnerLicenseCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "licenseOf",
    outputs: [
      {
        internalType: "string",
        name: "uri",
        type: "string",
      },
      {
        internalType: "string",
        name: "info",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "ownerLicenses",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_for",
        type: "address",
      },
    ],
    name: "removeDefaultLicense",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "robot",
    outputs: [
      {
        internalType: "contract IRobot",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_for",
        type: "address",
      },
      {
        internalType: "string",
        name: "_licenseUri",
        type: "string",
      },
      {
        internalType: "string",
        name: "_info",
        type: "string",
      },
    ],
    name: "setDefaultLicense",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalLicenseCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "contractAddress",
        type: "address",
      },
    ],
    name: "whitelistOwnerContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516113ba3803806113ba83398101604081905261002f916100d4565b61003833610084565b6001600160a01b03811661005f5760405163d92e233d60e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055610104565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100e657600080fd5b81516001600160a01b03811681146100fd57600080fd5b9392505050565b6112a7806101136000396000f3fe608060405234801561001057600080fd5b50600436106100af5760003560e01c806320209080146100b457806337459998146100f3578063469c4e981461012a57806347b84f3e1461014b578063715018a6146101605780637a14a626146101685780638da5cb5b1461017b578063913e6f0714610183578063970a211e14610196578063bc94d06a146101a9578063f2fde38b146101bc578063f3d2cd4d146101cf578063fbf6f565146101e2575b600080fd5b6100dd6100c2366004610f8f565b6004602052600090815260409020546001600160a01b031681565b6040516100ea9190610fb3565b60405180910390f35b61011c610101366004610f8f565b6001600160a01b031660009081526003602052604090205490565b6040519081526020016100ea565b61013d610138366004610f8f565b6101eb565b6040516100ea929190611014565b61015e610159366004611042565b610317565b005b61015e6103ed565b61015e61017636600461111d565b610401565b6100dd6107c8565b61015e610191366004611042565b6107d7565b6001546100dd906001600160a01b031681565b61015e6101b7366004610f8f565b6108b1565b61015e6101ca366004610f8f565b610d28565b6100dd6101dd366004611192565b610da6565b61011c60055481565b600260205260009081526040902080548190610206906111be565b80601f0160208091040260200160405190810160405280929190818152602001828054610232906111be565b801561027f5780601f106102545761010080835404028352916020019161027f565b820191906000526020600020905b81548152906001019060200180831161026257829003601f168201915b505050505090806001018054610294906111be565b80601f01602080910402602001604051908101604052809291908181526020018280546102c0906111be565b801561030d5780601f106102e25761010080835404028352916020019161030d565b820191906000526020600020905b8154815290600101906020018083116102f057829003601f168201915b5050505050905082565b61031f610dde565b6001600160a01b038216158061033c57506001600160a01b038116155b1561035a5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0381811660009081526004602052604090205481169083161461039757604051630b094f2760e31b815260040160405180910390fd5b6001600160a01b0380821660008181526004602052604080822080546001600160a01b03191690555191928516917f3160ed066c4ce3b9d6ee2720b907931af7de4875a53e9280595d22c5c06fdad89190a35050565b6103f5610dde565b6103ff6000610e3d565b565b826001600160a01b0381166104295760405163d92e233d60e01b815260040160405180910390fd5b806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610483575060408051601f3d908101601f19168201909252610480918101906111f8565b60015b6104c6576001600160a01b038181166000908152600460205260409020541633146104c157604051630b094f2760e31b815260040160405180910390fd5b6104f1565b336001600160a01b038216146104ef576040516330cd747160e01b815260040160405180910390fd5b505b825160000361051357604051637c946ed760e01b815260040160405180910390fd5b6001600160a01b0384166000908152600260205260408082208151808301909252805482908290610543906111be565b80601f016020809104026020016040519081016040528092919081815260200182805461056f906111be565b80156105bc5780601f10610591576101008083540402835291602001916105bc565b820191906000526020600020905b81548152906001019060200180831161059f57829003601f168201915b505050505081526020016001820180546105d5906111be565b80601f0160208091040260200160405190810160405280929190818152602001828054610601906111be565b801561064e5780601f106106235761010080835404028352916020019161064e565b820191906000526020600020905b81548152906001019060200180831161063157829003601f168201915b5050505050815250509050806000015151600003610717576001546040516335313c2160e11b81526001600160a01b0390911690636a62784290610696903390600401610fb3565b600060405180830381600087803b1580156106b057600080fd5b505af11580156106c4573d6000803e3d6000fd5b5050600580549250905060006106d98361122b565b90915550503360009081526003602090815260408220805460018101825590835291200180546001600160a01b0319166001600160a01b0387161790555b60408051808201825285815260208082018690526001600160a01b0388166000908152600282529290922081518051929391926107579284920190610e8d565b5060208281015180516107709260018501920190610e8d565b50905050846001600160a01b0316336001600160a01b03167f14b1a4831f1b4272413ee80e5e389e565d8230ce4407d7f15ee28b28ff087d0886866040516107b9929190611014565b60405180910390a35050505050565b6000546001600160a01b031690565b6107df610dde565b6001600160a01b03821615806107fc57506001600160a01b038116155b1561081a5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038181166000908152600460205260409020548184169116036108575760405163b73e95e160e01b815260040160405180910390fd5b6001600160a01b0381811660008181526004602052604080822080546001600160a01b0319169487169485179055519192917fd5885034f191555390b2a9935e59060c37127eef104dfb5ffec0823b6b2f2f479190a35050565b806001600160a01b0381166108d95760405163d92e233d60e01b815260040160405180910390fd5b806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610933575060408051601f3d908101601f19168201909252610930918101906111f8565b60015b610976576001600160a01b0381811660009081526004602052604090205416331461097157604051630b094f2760e31b815260040160405180910390fd5b6109a1565b336001600160a01b0382161461099f576040516330cd747160e01b815260040160405180910390fd5b505b6001600160a01b03821660009081526002602052604080822081518083019092528054829082906109d1906111be565b80601f01602080910402602001604051908101604052809291908181526020018280546109fd906111be565b8015610a4a5780601f10610a1f57610100808354040283529160200191610a4a565b820191906000526020600020905b815481529060010190602001808311610a2d57829003601f168201915b50505050508152602001600182018054610a63906111be565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8f906111be565b8015610adc5780601f10610ab157610100808354040283529160200191610adc565b820191906000526020600020905b815481529060010190602001808311610abf57829003601f168201915b5050505050815250509050806000015151600003610b0d57604051636543223f60e11b815260040160405180910390fd5b6001600160a01b038316600090815260026020526040812090610b308282610f11565b610b3e600183016000610f11565b505033600090815260036020908152604080832080548251818502810185019093528083529192909190830182828015610ba157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b83575b5050336000908152600360205260408120949550610bc49493509150610f4b9050565b60005b8151811015610c7357846001600160a01b0316828281518110610bec57610bec611244565b60200260200101516001600160a01b031614610c61573360009081526003602052604090208251839083908110610c2557610c25611244565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b039092169190911790555b80610c6b8161122b565b915050610bc7565b5060015460405163226bf2d160e21b81526001600160a01b03909116906389afcb4490610ca4903390600401610fb3565b600060405180830381600087803b158015610cbe57600080fd5b505af1158015610cd2573d6000803e3d6000fd5b505060058054925090506000610ce78361125a565b90915550506040516001600160a01b0385169033907f15cdaab87b992325d369f6b50d73c5a0fce7856c598f1855bf0a0fedc52b821690600090a350505050565b610d30610dde565b6001600160a01b038116610d9a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b610da381610e3d565b50565b60036020528160005260406000208181548110610dc257600080fd5b6000918252602090912001546001600160a01b03169150829050565b33610de76107c8565b6001600160a01b0316146103ff5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610d91565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054610e99906111be565b90600052602060002090601f016020900481019282610ebb5760008555610f01565b82601f10610ed457805160ff1916838001178555610f01565b82800160010185558215610f01579182015b82811115610f01578251825591602001919060010190610ee6565b50610f0d929150610f65565b5090565b508054610f1d906111be565b6000825580601f10610f2d575050565b601f016020900490600052602060002090810190610da39190610f65565b5080546000825590600052602060002090810190610da391905b5b80821115610f0d5760008155600101610f66565b6001600160a01b0381168114610da357600080fd5b600060208284031215610fa157600080fd5b8135610fac81610f7a565b9392505050565b6001600160a01b0391909116815260200190565b6000815180845260005b81811015610fed57602081850181015186830182015201610fd1565b81811115610fff576000602083870101525b50601f01601f19169290920160200192915050565b6040815260006110276040830185610fc7565b82810360208401526110398185610fc7565b95945050505050565b6000806040838503121561105557600080fd5b823561106081610f7a565b9150602083013561107081610f7a565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126110a257600080fd5b81356001600160401b03808211156110bc576110bc61107b565b604051601f8301601f19908116603f011681019082821181831017156110e4576110e461107b565b816040528381528660208588010111156110fd57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561113257600080fd5b833561113d81610f7a565b925060208401356001600160401b038082111561115957600080fd5b61116587838801611091565b9350604086013591508082111561117b57600080fd5b5061118886828701611091565b9150509250925092565b600080604083850312156111a557600080fd5b82356111b081610f7a565b946020939093013593505050565b600181811c908216806111d257607f821691505b6020821081036111f257634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561120a57600080fd5b8151610fac81610f7a565b634e487b7160e01b600052601160045260246000fd5b60006001820161123d5761123d611215565b5060010190565b634e487b7160e01b600052603260045260246000fd5b60008161126957611269611215565b50600019019056fea2646970667358221220cda8c5c97ad33c74b17d31b6e83f5af449702884c5ec429de6f37132f943e8ef64736f6c634300080d0033";

type RobotTxtConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RobotTxtConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RobotTxt__factory extends ContractFactory {
  constructor(...args: RobotTxtConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    robotAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RobotTxt> {
    return super.deploy(robotAddress, overrides || {}) as Promise<RobotTxt>;
  }
  override getDeployTransaction(
    robotAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(robotAddress, overrides || {});
  }
  override attach(address: string): RobotTxt {
    return super.attach(address) as RobotTxt;
  }
  override connect(signer: Signer): RobotTxt__factory {
    return super.connect(signer) as RobotTxt__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RobotTxtInterface {
    return new utils.Interface(_abi) as RobotTxtInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RobotTxt {
    return new Contract(address, _abi, signerOrProvider) as RobotTxt;
  }
}
