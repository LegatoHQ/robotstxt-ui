/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface RobotTxtInterface extends utils.Interface {
  functions: {
    "contractAddressToOwnerWhitelist(address)": FunctionFragment;
    "delistOwnerContract(address,address)": FunctionFragment;
    "getOwnerLicenseCount(address)": FunctionFragment;
    "licenseOf(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerLicenses(address,uint256)": FunctionFragment;
    "removeDefaultLicense(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "robot()": FunctionFragment;
    "setDefaultLicense(address,string,string)": FunctionFragment;
    "totalLicenseCount()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "whitelistOwnerContract(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "contractAddressToOwnerWhitelist"
      | "delistOwnerContract"
      | "getOwnerLicenseCount"
      | "licenseOf"
      | "owner"
      | "ownerLicenses"
      | "removeDefaultLicense"
      | "renounceOwnership"
      | "robot"
      | "setDefaultLicense"
      | "totalLicenseCount"
      | "transferOwnership"
      | "whitelistOwnerContract"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "contractAddressToOwnerWhitelist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "delistOwnerContract",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerLicenseCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "licenseOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerLicenses",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDefaultLicense",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "robot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setDefaultLicense",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "totalLicenseCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistOwnerContract",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "contractAddressToOwnerWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delistOwnerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerLicenseCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "licenseOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerLicenses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDefaultLicense",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "robot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultLicense",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLicenseCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistOwnerContract",
    data: BytesLike
  ): Result;

  events: {
    "ContractDelisted(address,address)": EventFragment;
    "ContractWhitelisted(address,address)": EventFragment;
    "LicenseRemoved(address,address)": EventFragment;
    "LicenseSet(address,address,string,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractDelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractWhitelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LicenseRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LicenseSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface ContractDelistedEventObject {
  owner: string;
  contractAddress: string;
}
export type ContractDelistedEvent = TypedEvent<
  [string, string],
  ContractDelistedEventObject
>;

export type ContractDelistedEventFilter =
  TypedEventFilter<ContractDelistedEvent>;

export interface ContractWhitelistedEventObject {
  owner: string;
  contractAddress: string;
}
export type ContractWhitelistedEvent = TypedEvent<
  [string, string],
  ContractWhitelistedEventObject
>;

export type ContractWhitelistedEventFilter =
  TypedEventFilter<ContractWhitelistedEvent>;

export interface LicenseRemovedEventObject {
  _by: string;
  _for: string;
}
export type LicenseRemovedEvent = TypedEvent<
  [string, string],
  LicenseRemovedEventObject
>;

export type LicenseRemovedEventFilter = TypedEventFilter<LicenseRemovedEvent>;

export interface LicenseSetEventObject {
  _by: string;
  _for: string;
  _licenseUri: string;
  _info: string;
}
export type LicenseSetEvent = TypedEvent<
  [string, string, string, string],
  LicenseSetEventObject
>;

export type LicenseSetEventFilter = TypedEventFilter<LicenseSetEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RobotTxt extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RobotTxtInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    contractAddressToOwnerWhitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    delistOwnerContract(
      owner: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getOwnerLicenseCount(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    licenseOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { uri: string; info: string }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerLicenses(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    removeDefaultLicense(
      _for: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    robot(overrides?: CallOverrides): Promise<[string]>;

    setDefaultLicense(
      _for: PromiseOrValue<string>,
      _licenseUri: PromiseOrValue<string>,
      _info: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalLicenseCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelistOwnerContract(
      owner: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  contractAddressToOwnerWhitelist(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  delistOwnerContract(
    owner: PromiseOrValue<string>,
    contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getOwnerLicenseCount(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  licenseOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, string] & { uri: string; info: string }>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerLicenses(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  removeDefaultLicense(
    _for: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  robot(overrides?: CallOverrides): Promise<string>;

  setDefaultLicense(
    _for: PromiseOrValue<string>,
    _licenseUri: PromiseOrValue<string>,
    _info: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalLicenseCount(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelistOwnerContract(
    owner: PromiseOrValue<string>,
    contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    contractAddressToOwnerWhitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    delistOwnerContract(
      owner: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getOwnerLicenseCount(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    licenseOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { uri: string; info: string }>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerLicenses(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    removeDefaultLicense(
      _for: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    robot(overrides?: CallOverrides): Promise<string>;

    setDefaultLicense(
      _for: PromiseOrValue<string>,
      _licenseUri: PromiseOrValue<string>,
      _info: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalLicenseCount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistOwnerContract(
      owner: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ContractDelisted(address,address)"(
      owner?: PromiseOrValue<string> | null,
      contractAddress?: PromiseOrValue<string> | null
    ): ContractDelistedEventFilter;
    ContractDelisted(
      owner?: PromiseOrValue<string> | null,
      contractAddress?: PromiseOrValue<string> | null
    ): ContractDelistedEventFilter;

    "ContractWhitelisted(address,address)"(
      owner?: PromiseOrValue<string> | null,
      contractAddress?: PromiseOrValue<string> | null
    ): ContractWhitelistedEventFilter;
    ContractWhitelisted(
      owner?: PromiseOrValue<string> | null,
      contractAddress?: PromiseOrValue<string> | null
    ): ContractWhitelistedEventFilter;

    "LicenseRemoved(address,address)"(
      _by?: PromiseOrValue<string> | null,
      _for?: PromiseOrValue<string> | null
    ): LicenseRemovedEventFilter;
    LicenseRemoved(
      _by?: PromiseOrValue<string> | null,
      _for?: PromiseOrValue<string> | null
    ): LicenseRemovedEventFilter;

    "LicenseSet(address,address,string,string)"(
      _by?: PromiseOrValue<string> | null,
      _for?: PromiseOrValue<string> | null,
      _licenseUri?: null,
      _info?: null
    ): LicenseSetEventFilter;
    LicenseSet(
      _by?: PromiseOrValue<string> | null,
      _for?: PromiseOrValue<string> | null,
      _licenseUri?: null,
      _info?: null
    ): LicenseSetEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    contractAddressToOwnerWhitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delistOwnerContract(
      owner: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getOwnerLicenseCount(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    licenseOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerLicenses(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeDefaultLicense(
      _for: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    robot(overrides?: CallOverrides): Promise<BigNumber>;

    setDefaultLicense(
      _for: PromiseOrValue<string>,
      _licenseUri: PromiseOrValue<string>,
      _info: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalLicenseCount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelistOwnerContract(
      owner: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    contractAddressToOwnerWhitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delistOwnerContract(
      owner: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getOwnerLicenseCount(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    licenseOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerLicenses(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeDefaultLicense(
      _for: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    robot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDefaultLicense(
      _for: PromiseOrValue<string>,
      _licenseUri: PromiseOrValue<string>,
      _info: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalLicenseCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelistOwnerContract(
      owner: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
