/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface IRobotTxtInterface extends utils.Interface {
  functions: {
    "delistOwnerContract(address,address)": FunctionFragment;
    "getOwnerLicenseCount(address)": FunctionFragment;
    "setDefaultLicense(address,string,string)": FunctionFragment;
    "whitelistOwnerContract(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "delistOwnerContract"
      | "getOwnerLicenseCount"
      | "setDefaultLicense"
      | "whitelistOwnerContract"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "delistOwnerContract",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerLicenseCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultLicense",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistOwnerContract",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "delistOwnerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerLicenseCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultLicense",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistOwnerContract",
    data: BytesLike
  ): Result;

  events: {
    "ContractDelisted(address,address)": EventFragment;
    "ContractWhitelisted(address,address)": EventFragment;
    "LicenseRemoved(address,address)": EventFragment;
    "LicenseSet(address,address,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractDelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractWhitelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LicenseRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LicenseSet"): EventFragment;
}

export interface ContractDelistedEventObject {
  owner: string;
  contractAddress: string;
}
export type ContractDelistedEvent = TypedEvent<
  [string, string],
  ContractDelistedEventObject
>;

export type ContractDelistedEventFilter =
  TypedEventFilter<ContractDelistedEvent>;

export interface ContractWhitelistedEventObject {
  owner: string;
  contractAddress: string;
}
export type ContractWhitelistedEvent = TypedEvent<
  [string, string],
  ContractWhitelistedEventObject
>;

export type ContractWhitelistedEventFilter =
  TypedEventFilter<ContractWhitelistedEvent>;

export interface LicenseRemovedEventObject {
  _by: string;
  _for: string;
}
export type LicenseRemovedEvent = TypedEvent<
  [string, string],
  LicenseRemovedEventObject
>;

export type LicenseRemovedEventFilter = TypedEventFilter<LicenseRemovedEvent>;

export interface LicenseSetEventObject {
  _by: string;
  _for: string;
  _licenseUri: string;
  _info: string;
}
export type LicenseSetEvent = TypedEvent<
  [string, string, string, string],
  LicenseSetEventObject
>;

export type LicenseSetEventFilter = TypedEventFilter<LicenseSetEvent>;

export interface IRobotTxt extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRobotTxtInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    delistOwnerContract(
      owner: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getOwnerLicenseCount(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setDefaultLicense(
      _for: PromiseOrValue<string>,
      _licenseUri: PromiseOrValue<string>,
      _info: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelistOwnerContract(
      owner: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  delistOwnerContract(
    owner: PromiseOrValue<string>,
    contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getOwnerLicenseCount(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setDefaultLicense(
    _for: PromiseOrValue<string>,
    _licenseUri: PromiseOrValue<string>,
    _info: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelistOwnerContract(
    owner: PromiseOrValue<string>,
    contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    delistOwnerContract(
      owner: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getOwnerLicenseCount(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDefaultLicense(
      _for: PromiseOrValue<string>,
      _licenseUri: PromiseOrValue<string>,
      _info: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistOwnerContract(
      owner: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ContractDelisted(address,address)"(
      owner?: PromiseOrValue<string> | null,
      contractAddress?: PromiseOrValue<string> | null
    ): ContractDelistedEventFilter;
    ContractDelisted(
      owner?: PromiseOrValue<string> | null,
      contractAddress?: PromiseOrValue<string> | null
    ): ContractDelistedEventFilter;

    "ContractWhitelisted(address,address)"(
      owner?: PromiseOrValue<string> | null,
      contractAddress?: PromiseOrValue<string> | null
    ): ContractWhitelistedEventFilter;
    ContractWhitelisted(
      owner?: PromiseOrValue<string> | null,
      contractAddress?: PromiseOrValue<string> | null
    ): ContractWhitelistedEventFilter;

    "LicenseRemoved(address,address)"(
      _by?: PromiseOrValue<string> | null,
      _for?: PromiseOrValue<string> | null
    ): LicenseRemovedEventFilter;
    LicenseRemoved(
      _by?: PromiseOrValue<string> | null,
      _for?: PromiseOrValue<string> | null
    ): LicenseRemovedEventFilter;

    "LicenseSet(address,address,string,string)"(
      _by?: PromiseOrValue<string> | null,
      _for?: PromiseOrValue<string> | null,
      _licenseUri?: null,
      _info?: null
    ): LicenseSetEventFilter;
    LicenseSet(
      _by?: PromiseOrValue<string> | null,
      _for?: PromiseOrValue<string> | null,
      _licenseUri?: null,
      _info?: null
    ): LicenseSetEventFilter;
  };

  estimateGas: {
    delistOwnerContract(
      owner: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getOwnerLicenseCount(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDefaultLicense(
      _for: PromiseOrValue<string>,
      _licenseUri: PromiseOrValue<string>,
      _info: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelistOwnerContract(
      owner: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    delistOwnerContract(
      owner: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getOwnerLicenseCount(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDefaultLicense(
      _for: PromiseOrValue<string>,
      _licenseUri: PromiseOrValue<string>,
      _info: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelistOwnerContract(
      owner: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
